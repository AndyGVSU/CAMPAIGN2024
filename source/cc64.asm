;cc64.asm
;C64-MODIFIED FUNCTIONS

_GX_INIT 
	LDA #C_BLACK
	STA BACKCOL
	LDA #C_DRED
	STA BACKCOL+1
	LDA #C_WHITE
	STA BACKCOL+2

	JSR _GX_ECM

	RTS 

;turns on ECM bit
_GX_ECM
	LDA SCRREG1
	ORA #$40
	STA SCRREG1
	RTS

_GX_FILL 
	LDA OFFSET
	STA GX_X
	LDA OFFSET+1
	STA GX_Y

	LDX #00
@STORPTR 
	LDA SPRPTR,X
	STA V_SPRPTR,X
	INX 
	CPX #$08
	BNE @STORPTR

	LDA #$00
	STA OFFSET
	LDA #$04
	STA OFFSET+1
	LDY #00
@LOOP 
	LDA #$20
	STA (OFFSET),Y
	LDA OFFSET+1
	CLC 
	ADC #$D4
	STA OFFSET+1
	LDA GX_PCOL
	STA (OFFSET),Y
	LDA OFFSET+1
	SEC 
	SBC #$D4
	STA OFFSET+1
	INY 
	BNE @LOOP
	INC OFFSET+1
	LDA OFFSET+1
	CMP #$08
	BNE @LOOP

	LDX #00
@STORPT2 
	LDA V_SPRPTR,X
	STA SPRPTR,X


	INX 
	CPX #$08
	BNE @STORPT2

	RTS 

_GX_LINE 

	RTS 

_RNGINIT 
	LDA #$FF
	STA $D40F
	LDA #$80
	STA $D412
	STA $D418

	RTS
	
_RNGOFF
	PHA
	LDA #00
	STA $D40F
	STA $D412
	STA $D418
	PLA
	RTS

_GETINP 
@LOOP 
	JSR _SCNKEY
	JSR _GETIN
	CMP #$00
	BEQ @LOOP

	RTS 

;just changes the map's character colors
_DRWMAP 
	JSR _MAPCHAR
	+__LAB2O D_MAPSHP

	LDA #$D8
	STA OFFSET2+1
	LDA #$2C
	STA OFFSET2

	LDA #00
	STA GX_CROW
@ROWLOOP 
	LDA #00
	STA GX_CCOL
@COLLOOP 
	LDY #00
	LDA (OFFSET),Y
	BEQ @CLEAR
	TAX 
	LDA V_STCOL,X
	JMP @COLOR
@CLEAR 
	LDA #C_BLUE
@COLOR 
	STA (OFFSET2),Y

	JSR _DRWMAP2
	INC GX_CCOL
	LDA GX_CCOL

	CMP #$19
	BNE @COLLOOP

	LDA OFFSET2
	CLC 
	ADC #$0F
	STA OFFSET2
	BCC @CARRY
	INC OFFSET2+1
@CARRY 

	INC GX_CROW
	LDA GX_CROW
	CMP #$0F
	BNE @ROWLOOP
@SKIP 
	RTS 
;increments offsets
_DRWMAP2 
	LDA OFFSET
	CLC 
	ADC #$01
	STA OFFSET
	BCC @CARRY
	INC OFFSET+1
@CARRY 
	LDA OFFSET2
	CLC 
	ADC #$01
	STA OFFSET2
	BCC @CARRY2
	INC OFFSET2+1
@CARRY2 
	RTS 

;draws a block of filled characters
_MAPCHAR 
	LDA #$04
	STA GX_LX1
	LDA #$1D
	STA GX_LX2
	LDA #$01
	STA GX_LY1
	LDA #$10
	STA GX_LY2
	LDA #C_WHITE
	STA GX_DCOL
	JSR _GX_RECT
	RTS 

;sprites initialize
_SPRINIT 
	LDA #00
	TAX 
	TAY 
@SPRCOPY 
	LDA D_SPRITE,Y
	STA V_SPRITE,Y
	INY 
	CPY #$80
	BNE @SPRCOPY

;LDA D_SPRITE,Y
;STA V_SPRITE+0,X
;LDA D_SPRITE+8,Y
;STA V_SPRITE+64,X
;INX 
;INX 
;INX 
;INY 
;CPY #$07
;BNE @SPRCOPY
;LDA D_SPRITE,Y
;STA V_SPRITE+0,X
;STA V_SPRITE+1,X
;STA V_SPRITE+2,X
;LDA D_SPRITE+8,Y
;STA V_SPRITE+64,X
	LDA #$21
	STA SPRPTR+0
	LDA #$22
	STA SPRPTR+1
	LDX #$07
	LDA #$0C
@COLRES 
	STA SPRCOL,X
	DEX 
	BPL @COLRES
	LDA #$01
	STA SPRDBL
	LDA #$01
	STA SPRPOS8
	LDA #$04
	STA SPRPOS+0
	LDA #$32
	STA SPRPOS+1
	LDA #$36
	STA SPRPOS+2
	LDA #$38
	STA SPRPOS+3
	LDA #00
	LDY #$04
	RTS
	
;get_safe_multiplier()
;returns if (my CP - 2nd highest CP is > UND CP)
_MULTSAFE
	JSR _CPTOMAX
	JSR _MAX2
	TAY
	DEY
	CPY V_PARTY
	BNE @NOTSAFE ;not safe if not highest CP
	
	JSR _MAX2ND
	LDY V_PARTY
	INY
	LDA (CP_ADDR),Y
	SEC
	SBC MAXLOW
	LDY #UND_PRTY
	INY
	CMP (CP_ADDR),Y
	BCC @NOTSAFE
	
@SAFE
	LDA #$01
	RTS
@NOTSAFE
	LDA #$00
	RTS
