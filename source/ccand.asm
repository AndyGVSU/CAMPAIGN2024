;ccand.asm
;CAMP09 
;candidate routines

;candidate_swap() 
;stores current candidate to memory
;loads next candidate to current
_CANDSWAP 
	LDA V_PARTY
	JSR _CANDSAVE
	INC V_PARTY
	LDA V_PARTY
	CMP S_PLAYER
	BNE @WRAP
	LDA #00
	STA V_PARTY
@WRAP 
	JSR _CANDLOAD
	RTS 

;candidate_save(A=party index)
;stores current candidate to memory
_CANDSAVE 
	TAX 
	+__LAB2O V_ALLCND
	LDY #CANDDATA
	JSR _OFFSET
	LDY #00
@LOOP 
	LDA C_SCHEDC,Y
	STA (OFFSET),Y
	INY 
	CPY #CANDDATA
	BNE @LOOP
	RTS 

;candidate_load(A=party index)
;loads saved candidate to current
_CANDLOAD 
	TAX 
	+__LAB2O V_ALLCND
	LDY #CANDDATA
	JSR _OFFSET
	LDY #00
@LOOP LDA (OFFSET),Y
	STA C_SCHEDC,Y
	INY 
	CPY #CANDDATA
	BNE @LOOP
	RTS 

;primary_candidate_select() 
_CANDSEL 
	LDA #00
	STA V_WEEK
@NEXTPTY 
	LDA #00
	STA C_INCUMB
	STA FSTATE ;primary index counter
	JSR _CANDGEN

	LDA S_CUSTOM
	BEQ @SANYWAY
	JSR _CANDSEL2
	JSR _CANDSEL3
	JMP @SELECTD
@SANYWAY

@NEXTCAN 
	LDX FSTATE
	JSR _CANDSEL2

	+__COORD P_PNAMER,P_PNAMEC
	LDX V_PARTY
	LDA V_PTCOL,X
	STA GX_DCOL

	+__LAB2O D_PARTY
	LDX V_PARTY
	LDY #$0B
	JSR _OFFSET
	+__O2XY
	JSR _GX_STR ;draw party name

	LDA GX_DCOL
	STA GX_BCOL

	LDX V_PARTY
	LDA V_PTCOL,X
	STA GX_DCOL
	+__LAB2XY T_CONVEN
	+__COORD P_CONVNR,P_CONVNC
	JSR _GX_STR

	+__COORD P_NOYESR,P_NOYESC
	+__LAB2XY T_NOYES
	JSR _GX_STR
	LDX #P_NOYESR
	LDY #P_NOYESR+1
	JSR _RSELECT
	BEQ @INCCAND
	BNE @SELECTD
@INCCAND INC FSTATE
	LDA FSTATE
	CMP #PRIMARYC
	BNE @NEXTCAN
	LDA #00
	STA FSTATE
	BEQ @NEXTCAN

@SELECTD 
	LDA V_PARTY
	STA C_PARTY
	
	LDA C_HOME
	STA FARG1
	JSR _CPOFFS
	LDA #UND_OFFS
	CLC
	ADC V_PARTY
	TAY
	INY
	LDA (CP_ADDR),Y
	CLC
	ADC #$02
	STA (CP_ADDR),Y ;STATE LEAN + 2 in home state
	
	JSR _PLAYINP
	JSR _DRWINCM
	JSR _DRWAIM
	JMP @QDONE

@QUICKG2 
	LDX #00
	LDA #03
@AILOOP 
	STA V_AI,X
	INX 
	CPX #$04
	BNE @AILOOP
@QDONE 
	JSR _CANDSS2 ;factor in INCUMBENT bonus
	JSR _CANDSWAP ;incs v_party

	LDA V_PARTY
	BEQ @DONE
	JMP @NEXTPTY
@DONE 
	RTS 
;load candidate info
_CANDSEL2 
	JSR _CPYPRIM
	JSR _CANDSSC
	JSR _DRWCAND
	RTS 

;custom candidate select
_CANDSEL3
	LDA S_CUSTOM
	BNE @ON
	RTS
@ON
	JSR _MAP
	LDA MAP_RES
	BEQ @ON
	STA C_HOME
	STA C_VBONUS
	JSR _STATEGR
	STX C_CREG
	STX C_IREG
	JSR _DRWCAND
	
	LDA #$00
	STA FVAR1
@PRIMARY
	LDA #P_PRIMR
	CLC
	ADC FVAR1
	STA GX_CROW
	LDA #P_PRIMC
	STA GX_CCOL
	LDA #FILLCHR
	STA GX_CIND
	LDA #C_WHITE
	STA GX_DCOL
	JSR _GX_CHAR
@INPUT
	JSR _INPUTF3
	STA GX_CIND
	AND #$0F
	CMP #$01
	BCC @INPUT
	CMP #$09
	BCS @INPUT
	LDX FVAR1
	STA C_CHAR,X
	JSR _GX_CHAR
	INC FVAR1
	LDA FVAR1
	CMP #$05
	BNE @PRIMARY
	
	JSR _GENHEAL
	STA C_HEALTH
	LDX C_CORP
	JSR _GENMONEY
	STA C_MONEY
	
	JSR _CANDSSC
	JSR _DRWCAND
	
	LDA #$00
	STA FVAR1
@ISSUES
	LDA #P_ISSUER
	CLC
	ADC FVAR1
	STA GX_CROW
	LDA #P_ISSUEC
	STA GX_CCOL
	LDA #FILLCHR
	STA GX_CIND
	LDA #C_WHITE
	STA GX_DCOL
	JSR _GX_CHAR
@INPUT2
	JSR _INPUTF3
	STA GX_CIND
	AND #$0F
	CMP #$08
	BCS @INPUT2
	LDX FVAR1
	STA C_ISSUES,X
	JSR _GX_CHAR
	INC FVAR1
	LDA FVAR1
	CMP #ISSUEC
	BNE @ISSUES
	JSR _DRWCAND
	
	JSR _FTC
	BEQ @DONE
	JMP _CANDSEL3
@DONE
	RTS

;copy_primary_candidate(X=PRIMARY INDEX)
_CPYPRIM 
	+__LAB2O V_PRIMRY
	LDY #$10
	JSR _OFFSET
	LDY #01
	LDX #00
@PSLOOP 
	LDA (OFFSET),Y
	STA C_CHAR,X
	INY 
	INX 
	CPX #$05
	BNE @PSLOOP
	LDX #00
@ISLOOP 
	LDA (OFFSET),Y
	STA C_ISSUES,X
	INY 
	INX 
	CPX #$05
	BNE @ISLOOP
	LDA (OFFSET),Y
	STA C_HOME
	STA C_VBONUS
	STA V_VBONUS
	INY 
	LDA (OFFSET),Y
	STA C_TITLE
	INY 
	LDA (OFFSET),Y
	STA C_HEALTH
	INY 
	LDA (OFFSET),Y
	STA C_MONEY
	INY
	LDA (OFFSET),Y
	LDX V_PARTY
	STA V_PROFILE,X
	RTS 

;setup_player_names() 
;copies four "PLAYER # " to memory
_SETUPPN 
	+__LAB2O V_PNAME
	LDA #00
	STA FVAR1 ;player index
	+__LAB2A T_PLAYER

@LOOP LDA OFFSET
	STA FARG3
	LDA OFFSET+1
	STA FARG3+1 ;destination
	LDA #NAMELEN
	STA FARG5
	JSR _COPY
	INC FVAR1
	LDA FVAR1
	ORA #$30 ;player #
	LDY #$07
	STA (OFFSET),Y
	LDX #$01
	LDY #NAMELEN
	JSR _OFFSET ;inc destination
	LDA FVAR1
	CMP #$04
	BNE @LOOP
	RTS 

;primary_candidate_generation() 
_CANDGEN 
	+__LAB2O V_PRIMRY
	LDA #PRIMARYC
	STA FVAR1 ;current candidate
@TOP 
	LDY #$05
@CLRLOOP 
	LDA #$01
	STA (OFFSET),Y
	DEY 
	BNE @CLRLOOP

	LDA S_CLASSC
	BEQ @CLASSC
	JSR _CANDGEN2
	JMP @PRIMDONE
@CLASSC
	LDX #$14 ;20 "primary points"

	LDA S_EQCER
	BEQ @SKIPEQ
	LDA #05
	LDY #01
	STA (OFFSET),Y
	LDY #03
	STA (OFFSET),Y
	LDX #$0A ;10 "primary points"
@SKIPEQ 
@RNGLOOP 
	LDA #$05
	JSR _RNG ;rand(0,3)
	TAY
	INY 
	LDA S_EQCER
	BEQ @SKIPEQ2
	CPY #$01 ;if EQUAL CER, do not add to CHAR/INTL
	BEQ @RNGLOOP
	CPY #$03
	BEQ @RNGLOOP
@SKIPEQ2 
	LDA (OFFSET),Y
	CMP #$08
	BEQ @RNGLOOP
	CLC 
	ADC #$01
	STA (OFFSET),Y
	DEX 
	BNE @RNGLOOP
;;
@PRIMDONE
	LDA S_3PMODE
	BEQ @SKIPWOR
	JSR _ISSUWOR
@SKIPWOR 

@ROLLSTA 
	LDA #$34
	JSR _RNG
	BEQ @ROLLSTA ;home state index
	STA FVAR5
	JSR _4PREGSTA
	
	LDY #$06
@NEXTISS ;issues
	LDA #00
	STA FRET3
	JSR _ISSUSEL
	LDX FRET3

	LDA S_GMMODE
	BNE @RANDOM ;random mode
	LDA V_PARTY
	CMP #$02
	BCC @LIMITED
	LDA #$0C ;1/12 for IPS
	BNE @EXTREME
@LIMITED 
	LDA #$04 ;1/4 for DR
@EXTREME
	JSR _RNG
	BNE @NO_ODD
	
	LDA S_CLASSC
	BNE @NO_ODD
	;+/- 
	LDA #$02
	JSR _RNG
	BNE @RPLUS1
	DEX 
	JMP @NO_ODD
@RPLUS1 
	INX 
@NO_ODD 
	;store issue value
	TXA 
	STA (OFFSET),Y
	INY 

	CPY #$0B
	BNE @NEXTISS
	BEQ @DONEISS
@RANDOM 
	LDA #$07
	JSR _RNG
	BEQ @RANDOM
	TAX 
	BNE @NO_ODD
@DONEISS 
	LDA FVAR5 ;load prev. home state
	STA (OFFSET),Y
	INY 
	LDA #$08
	JSR _RNG ;candidate title
	BEQ @SKMULT
	TAX 
	LDA #00
	CLC 
@MULT ADC #$05
	DEX 
	BNE @MULT
@SKMULT STA (OFFSET),Y
	JSR _GENHEAL
	INY 
	STA (OFFSET),Y ;random health
	STY FVAR2
	LDY #$05
	LDA (OFFSET),Y
	TAX
	JSR _GENMONEY
	LDY FVAR2
	INY 
	STA (OFFSET),Y ;random funds
@SKIPBON 
	INY
	LDA #$FF
	JSR _RNG
	STA (OFFSET),Y ;random profile

	LDY #$10
	LDX #$01
	JSR _OFFSET
	LDY FVAR2

	DEC FVAR1
	BEQ @RTS
	JMP @TOP
@RTS 
	RTS 
;classic primary stat generation
_CANDGEN2
	LDY #$01
@LOOP
	LDA #$00
	STA FVAR5
	LDA #$04
	JSR _RNG
	CLC
	ADC FVAR5
	STA FVAR5
	LDA #$04
	JSR _RNG
	CLC
	ADC FVAR5
	STA FVAR5
	LDA #$02
	JSR _RNG
	CLC
	ADC FVAR5
	ADC #$01
	STA (OFFSET),Y
	INY
	CPY #$06
	BNE @LOOP
	
	LDA S_EQCER
	BEQ @EQCER
	LDA #$05
	LDY #$01
	STA (OFFSET),Y
	LDY #$03
	STA (OFFSET),Y
@EQCER
	RTS
	
;generate_random_health()
_GENHEAL
	LDA #$20
	JSR _RNG
	RTS
;generate_random_money(X = CORP)
_GENMONEY
	LDA #$20
	JSR _RNG
	
	CPX #$07
	BEQ @BONUS1
	CPX #$08
	BEQ @BONUS2
	BNE @BONVAL
@BONUS1 
	CLC
	ADC #30
	BNE @BONVAL
@BONUS2 
	CLC
	ADC #70
@BONVAL
	RTS
	
;4p_regional_home_state()
;selects a state from the home region with EC < 20
_4PREGSTA
	LDA S_PLAYER
	CMP #$04
	BNE @RTS
	LDA S_4PMODE
	BEQ @RTS
	
	LDX V_PARTY
	LDA V_4PREG,X
	TAX
	LDA D_REGC-1,X
	JSR _RNG
	CLC
	ADC D_REGLIM-1,X
	TAX
	LDA V_EC,X
	CMP #20
	BCS _4PREGSTA
	STX FVAR5
@RTS
	RTS
	
;issue_candidate_X() 
;generates issue value for selected party
;LOCAL: FRET3
_ISSUECD 
	JSR _ISSUECS
	JSR _ISSUECS
	LDA #$02
	JSR _RNG
	BEQ @SKIP
	DEC FRET3
@SKIP 
	RTS 
_ISSUECR 
	JSR _ISSUECD
	INC FRET3
	INC FRET3
	RTS 
_ISSUECS 
	LDA #$02
	JSR _RNG
	CLC 
	ADC FRET3
	ADC #$01
	STA FRET3
	RTS 
_ISSUECP 
	JSR _ISSUECS
	INC FRET3
	INC FRET3
	INC FRET3
	INC FRET3
	RTS 
_ISSUECI 
	LDA #$02
	JSR _RNG
	CLC 
	ADC #$03
	STA FRET3
	RTS 
_ISSUECW 
	TYA 
	SEC 
	SBC #$06
	TAX 
	LDA V_MAX,X
	STA FRET3
	RTS 
;regional issue(FVAR5 = home state) 
;takes values from home state
;LOCAL: FY1
_ISSUECREG
	+__O2O2 ;store offset
	STY FY1
	LDA FVAR5
	STA FARG1
	JSR _CPOFFS
	LDA FY1
	SEC
	SBC #$06 ;the current generated candidate offset
	TAY
	LDA (IS_ADDR),Y
	STA FRET3
	+__O2O
	LDY FY1
	RTS

;issue_select() 
;chooses which party to select issue for
_ISSUSEL 
	LDA S_4PMODE
	BEQ @4PREG
	JSR _ISSUECREG
	RTS
@4PREG
	
	LDA V_PARTY
	BNE @REP

	JSR _ISSUECD
	RTS 
@REP 
	CMP #$01
	BNE @4P
	JSR _ISSUECR
	RTS 
@4P 
	CMP #$03
	BNE @3P
	JSR _ISSUECS
	RTS 
@3P 
	LDA S_PLAYER
	CMP #$04
	BNE @WOR
	JSR _ISSUECP
	RTS 
@WOR 
	LDA S_3PMODE
	BEQ @IND
	JSR _ISSUECW
	RTS 
@IND 
	JSR _ISSUECI
	RTS 

;generates WORKER issues
_ISSUWOR 
	JSR _MAXR
	LDA #$06
	STA FVAR2
	JSR _ISSUWOR2
	LDA #$06
	STA FVAR2
	JSR _ISSUWOR2
	LDA #$01
	STA FVAR2
	JSR _ISSUWOR2
	LDA #$01
	STA FVAR2
	JSR _ISSUWOR2
	LDA #$02
	JSR _RNG
	CLC 
	ADC #$03
	STA FVAR2
	JSR _ISSUWOR2
	RTS 

_ISSUWOR2 
	LDA #$05
	JSR _RNG
	TAX 
	LDA V_MAX,X
	BNE _ISSUWOR2
	LDA FVAR2


	STA V_MAX,X
	RTS 

;convenience_char() 
;inits party single char/colors
;LOCAL: FVAR1,FVAR2
_CONVCHR 
	LDX #00
	LDA #00
	LDY #00
	STA FVAR1
	STA FVAR2
@LOOP LDA D_PARTY,X
	STA V_PTCHAR,Y

	STY FVAR2
	LDY FVAR1
	LDA D_PARTY,X
	STA V_PTCHR3,Y
	LDA D_PARTY+1,X
	STA V_PTCHR3+1,Y
	LDA D_PARTY+2,X
	STA V_PTCHR3+2,Y
	LDA #00
	STA V_PTCHR3+3,Y
	INY 
	INY 
	INY 
	INY 
	STY FVAR1
	LDY FVAR2

	TXA 
	CLC 
	ADC #$0B
	TAX 
	INY 
	CPY #$06
	BNE @LOOP
	RTS 

;copies colors from data to var
_COPYCOL 
	+__LAB2A2 D_PTCOL2,V_PTCOL
	LDA #$07
	STA FARG5
	JSR _COPY
	RTS 

;3_player_setup() 
;switches PAT to IND, state lean changes
_SETUP3P 
	LDA S_PLAYER
	CMP #$03
	BEQ @CONTIN
	RTS
@CONTIN
	LDA S_3PMODE
	BNE @WORKERS

	LDA V_PTCOL+5
	STA V_PTCOL+2

	+__LAB2A2 IND3,PAT3
	LDA #$0B
	STA FARG5
	JSR _COPY ;copy INDEPENDENT over PATRIOT
	JMP @INDEPEN
@WORKERS 
	LDA V_PTCOL+6
	STA V_PTCOL+2

	+__LAB2A2 WOR3,PAT3
	LDA #$0B
	STA FARG5
	JSR _COPY ;copy WORKERS over PATRIOT
@INDEPEN 

	JSR _3PLEAN
	;target megastates
	LDA #$FF
	JSR _RNG
	AND #$01
	TAX 
	LDA D_MEGAST,X
	STA V_INDSTA
	INX 
	INX 
	LDA D_MEGAST,X
	STA V_INDSTA+1

	RTS 

;four_player_setup()
;for regional mode only
_SETUP4P
	LDA S_4PMODE
	BNE @CONTIN
	RTS
@CONTIN
	LDA #$00
	STA V_PARTY
@REGLOOP
	LDA #$02
	JSR _RNG
	CLC
	ADC V_PARTY
	ADC V_PARTY
	TAX
	LDA D_4PREG,X
	LDX V_PARTY
	STA V_4PREG,X ;set party region
	TAX
	JSR _DRWREGN3
	+__LAB2A V_STRING
	+__LAB2O D_PARTY
	LDX V_PARTY
	LDY #11
	JSR _OFFSET
	LDA OFFSET
	STA FARG3
	LDA OFFSET+1
	STA FARG4
	LDA #09
	STA FARG5
	JSR _COPY
	
	INC V_PARTY
	LDA V_PARTY
	CMP S_PLAYER
	BNE @REGLOOP
	
	LDA #00
	STA V_PARTY
	RTS

;three_player_state_lean()
;sets 3-player megastate leans
_3PLEAN 
	LDA #00
	LDX #00
	STA FVAR1
@MAINLP 
	LDY FVAR1
	LDA D_MEGAST,Y
	STA FARG1
	JSR _CPOFFS
	LDY #01
@LOOP1 
	LDA D_3PMEGA,X
	STY FY1
	JSR _CP5STOR
	LDY FY1
	INY 
	INX 
	CPY #$04
	BNE @LOOP1

	INC FVAR1
	LDA FVAR1
	CMP #$04
	BNE @MAINLP
	RTS 

;init_cp_ec() 
;LOCAL: FVAR1-3
_INITCP 
	JSR _CPOFFR ;reset cp_addr
	LDX #00 ;exception: should be 0
	STX FSTATE
@LOOP1 
	LDX FSTATE
	CPX #STATE_C-1
	BEQ @RTS
	
	TXA
	LSR
	TAX
	LDA D_INITCP,X
	STA FVAR3
	LDA FSTATE
	AND #$01
	BEQ @EVEN
@ODD
	LDA FVAR3
	AND #$0F
	STA FVAR1 ;D LEAN
	JMP @RLEAN
@EVEN
	LDA FVAR3 ;loaded data
	LSR 
	LSR 
	LSR 
	LSR 
	AND #$0F
	STA FVAR1 ;D LEAN
@RLEAN
	LDA FVAR1
	CMP #$06
	BCS @SUB
	CMP #$05
	BEQ @EQUAL
	LDA #$05
	SEC
	SBC FVAR1
	STA FVAR3 ;hold diff
	LDA #$05
	CLC
	ADC FVAR3
	JMP @EQUAL
@SUB
	SEC
	SBC #$05
	STA FVAR3 ;hold diff
	LDA #$05
	SEC
	SBC FVAR3
@EQUAL	
	STA FVAR2 ;R LEAN
	
	JSR _INITCP2 ;3/4 player cp
	JSR _CPOFFI ;inc addr
	INC FSTATE
@PASTINC 
	JMP @LOOP1
@RTS 
	RTS 
;sets UND CP, 3/4 player state leans
_INITCP2 
	LDA #$FF
	LDY #UND_OFFS
	STA (CP_ADDR),Y
	
	LDA FVAR1
	LDY #$01
	JSR _CP5STOR
	LDA FVAR2
	LDY #$02
	JSR _CP5STOR
	
	LDA S_PLAYER
	CMP #03
	BCS @OVER2P
	RTS

@OVER2P
	BEQ @3P
	
	LDA S_4PMODE
	BNE @REGIONAL
	+__SWAP FVAR1,FVAR2,FVAR3
	LDY #$03
	LDA FVAR1
	JSR _CP5STOR
	LDY #$04
	LDA FVAR2
	JSR _CP5STOR
	RTS
@REGIONAL
	LDY #$01
@REGLOOP
	JSR _4PLEAN
	JSR _CP5STOR
	TYA
	SEC
	SBC #$05
	TAY
	INY
	CPY #$05
	BNE @REGLOOP
	RTS
@3P
	LDA FSTATE
	CLC
	ADC #$01
	JSR _STATEGR
	CPX #$04
	BEQ @3BONUS
	CPX #$08
	BEQ @3BONUS
	
	LDA FVAR1
	CMP #$08
	BCS @NOTLEAN
	CMP #$03
	BCC @NOTLEAN

	LDA D_3PLEAN+1	
	JMP @3PAPPLY
@NOTLEAN
	LDA D_3PLEAN+0
	JMP @3PAPPLY
@3BONUS
	LDA D_3PLEAN+2
@3PAPPLY
	STA FVAR3
	LDY #$03
	LDA FVAR3
	JSR _CP5STOR
	RTS

;4p_region_lean(FY1 = party index + 1)
;LOCAL: FX1
_4PLEAN
	STY FY1
	LDX FSTATE
	INX
	TXA
	JSR _STATEGR
	STX FX1
	
	LDX FY1
	DEX
	TXA
	ASL
	TAX
	LDA D_4PREG,X
	CMP FX1
	BEQ @BONUS
	LDA D_4PREG+1,X
	CMP FX1
	BEQ @BONUS
	LDA #$05
	JMP @RTS
@BONUS
	LDA #$07
@RTS
	LDY FY1
	RTS

;init_cp_issues() 
;issue-based state leans
_INITCPI 
	LDA #00
	STA V_PARTY
	JSR _CANDLOAD
	JSR _CPOFFR
	LDA #01
	STA FSTATE
@LOOP2 
@LOOP1 ;get party offset
	LDA V_PARTY
	CLC 
	ADC #UND_OF1M
	STA FY1
	;get issue bonus
	LDA FSTATE
	STA FARG1
	LDA #00
	STA FRET1


	JSR _CISSUEB
	LDA FRET1
	;LSR ;state lean = issue bonus
	LDY FY1
	STA (CP_ADDR),Y
	LDY V_PARTY
	INY 
	STA (CP_ADDR),Y
	;starting CP = new state lean
	JSR _CANDSWAP
	LDA V_PARTY
	BNE @LOOP1
	INC FSTATE
	JSR _CPOFFI
	LDA FSTATE
	CMP #STATE_C
	BNE @LOOP2
	;reset loaded party
	LDA #00
	STA V_PARTY
	JSR _CANDLOAD

	RTS 

;init_ec() 
;copies EC values
_INITEC 
	LDA #<D_EC
	STA FARG1
	LDA #>D_EC
	STA FARG2
	LDA #<V_EC
	STA FARG3
	LDA #>V_EC
	STA FARG4
	LDA #STATE_C
	STA FARG5
	JSR _COPY
	RTS 

;candidate_secondary_stat_calc() 
_CANDSSC 
	JSR _CANDSS2
	JSR _CANDSS1
	RTS 
_CANDSS1 
	LDA C_MONEY
	CLC 
	ADC #$20
	CLC 
	ADC C_FUND
	ADC C_FUND
	CLC 
	ADC C_INTL
	STA C_MONEY

	LDA C_STAM

	ASL 
	ASL 
	ADC #$09
	SEC 
	SBC C_NETW
	STA C_STR
	LDA C_HEALTH
	CLC 
	ADC #$18
	ASL 
	CLC 
	ADC C_STR
	STA C_HEALTH

	LDA C_CHAR
	CLC 
	ADC C_NETW
	LDX C_CORP
	DEX 
	CLC 
	ADC D_TVCORP,X
	BPL @TVNEG
	LDA #$01
@TVNEG 
	STA C_TV
	LDA #00
	CLC 
	ADC C_STAM
	ASL 
	ADC C_INTL
	STA C_LMIN
	LDA C_HOME
	JSR _STATEGR
	STX C_IREG
	STX C_CREG
	RTS 
;for incumbent bonus recalculation
_CANDSS2 
	LDA C_CHAR
	ASL 
	CLC 
	ADC C_INTL
	STA C_CER
	LDA C_INCUMB
	AND #$0F
	TAX 
	LDA D_INCCER,X
	CLC 
	ADC C_CER
	STA C_CER ;add INCUMBENT bonus

	LDA C_CORP
	CLC 
	ADC C_NETW
	ASL 
	CLC
	ADC C_CORP
	STA C_FUND

	LDA C_INCUMB
	AND #$0F
	TAX 
	LDA D_INCFND,X
	CLC 
	ADC C_FUND ;add INCUMBENT bonus
	STA C_FUND

	RTS 

;3p_party_select()
_3PPARTY
	LDA S_PLAYER
	CMP #$03
	BNE @RTS
@FTC
	JSR _CLRBR

	+__COORD P_CONVNR,P_CONVNC
	+__LAB2XY T_3PARTY
	JSR _GX_STR
	
	+__COORD P_NOYESR,P_NOYESC-1
	LDX #$05
	JSR _3PPARTY2
	+__COORD P_NOYESR+1,P_NOYESC-1
	LDX #$06
	JSR _3PPARTY2
	
	LDX #P_NOYESR
	LDY #P_NOYESR+1
	JSR _RSELECT
	STA S_3PMODE
	JSR _FTC
	BNE @FTC
@RTS
	RTS
;X = party name index
_3PPARTY2
	LDA D_PTCOL2,X
	STA GX_DCOL
	+__LAB2O D_PARTY
	LDY #11
	JSR _OFFSET
	+__O2XY
	JSR _GX_STR
	RTS
	
;4p_party_select()
_4PPARTY
	LDA S_PLAYER
	CMP #$04
	BNE @RTS
@FTC
	JSR _CLRBR

	+__COORD P_CONVNR,P_CONVNC
	+__LAB2XY T_4PARTY
	JSR _GX_STR
	
	LDX #P_NOYESR
	LDY #P_NOYESR+1
	JSR _RSELECT
	STA S_4PMODE
	JSR _FTC
	BNE @FTC
@RTS
	RTS